[tool.poetry]
name = "fastapipythonrussia"
version = "0.1.0"
description = ""
authors = ["ya.novikov <arhdomain@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.111.0"
uvicorn = "^0.30.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.30"}
asyncpg = "^0.29.0"
python-dotenv = "^1.0.1"
httpx = "^0.27.0"
pydantic = "^2.7.1"
pyjwt = "^2.8.0"
bcrypt = "4.0.1"
factory-boy = "^3.3.0"
pydantic-settings = "^2.2.1"
python-multipart = "^0.0.9"
alembic = "^1.13.1"
passlib = "^1.7.4"
psycopg2-binary = "^2.9.9"
requests = "^2.32.3"
beautifulsoup4 = "^4.12.3"
tqdm = "^4.66.4"
jinja2 = "^3.1.4"
sqlalchemy-utils = "^0.41.2"
async-factory-boy = "^1.0.1"


[tool.poetry.group.test.dependencies]
pytest = "^8.2.1"
pytest-asyncio = "^0.23.7"
pytest-env = "^1.1.3"
pytest-mock = "^3.14.0"
pytest-sqlalchemy = "^0.2.1"


[tool.poetry.group.dev.dependencies]
black = "^24.4.2"
ruff = "^0.4.5"
bandit = "^1.7.8"


[tool.black]
extend-exclude = 'migrations'
include = '\.pyi?$'
line-length = 88
target-version = ['py312']


[tool.ruff]
lint.ignore = []
lint.select = [
  "E", # pycodestyle
  "F", # Pyflakes
  "UP", # pyupgrade
  "B", # flake8-bugbear
  "SIM", # flake8-simplify
  "I", # isort
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "I",
  "N",
  "Q",
  "S",
  "T",
  "W",
  "ANN",
  "ARG",
  "BLE",
  "COM",
  "DJ",
  "DTZ",
  "EM",
  "ERA",
  "EXE",
  "FBT",
  "ICN",
  "INP",
  "ISC",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "YTT",
]
lint.unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "*migrations*",
]


# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py312"


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 18


[tool.bandit]
exclude_dirs = [".venv"]
targets = ["src", "tests"]


[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py']


[tool.ruff.lint.isort]
lines-after-imports = 2
lines-between-types = 1
section-order = ["future", "standard-library", "first-party", "local-folder", "third-party"]


[tool.pytest.ini_options]
FASTAPI_SETTINGS_MODULE = "src.core"
addopts = "-p no:warnings"
env_override_existing_values = 1
env_files = ["secret/.envfile"]
python_files = "test_*.py"
pythonpath = ". src"
testpaths = ["tests"]
asyncio_mode = "auto"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# [tool.pytest_env]
# TEST_MODE = "True"
# HOST = {value = "localhost", skip_if_set = true}
# PORT = {value = "8000", skip_if_set = true}
# DEBUG = "True"

# AWS_ACCESS_KEY_ID = ""
# AWS_SECRET_ACCESS_KEY = ""
# AWS_STATIC_BUCKET = "test_static"
# AWS_MEDIA_BUCKET = "test_media"

# DB__NAME = {value = "test_database"}
# DB__HOST = {value = "localhost", skip_if_set = true}
# DB__PORT = "5432"
# # DB__USER = {value = "postgres666", skip_if_set = true}
# # DB__PASSWORD = {value = "postgres666", skip_if_set = true}

# REDIS_HOST = {value = "redis", skip_if_set = true}
# REDIS_PORT = "6379"
# SECRET_KEY = "123"
